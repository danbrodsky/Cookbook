Enable assembly mode:
(gdb) layout asm
(gdb) display/i $pc

Print variables:
(gdb) info variables
(gdb) info locals
(gdb) info args
(gdb) info registers <register>
(gdB) printf "%s\n", <location> (print string located in memory location)

read location in memory:
x <location>
x/20sb <location> (read 20 bytes in string format, one byte at a time)
p <variable> (read value in known variable)

Set breakpoint on address:
break *<location>

Find next return address (buffer overflow):
gdb -x <filename>
(gdb) input requested:
AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZaaaabbbbccccddddeeeeffffgggghhhhiiii...
(this will overwrite the return address if buffer unsafe)

Disassemble functions:
disass <function-label>

Run binary in core state:
gdb <file> <core-dump-file>
Commands:
bt full - get full backtrace
frame n - go to function at frame pointer n
cd /var/cache/abrt - go to core dump directory (locate latest with "ls -ltr")
